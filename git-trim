#!/bin/bash
# Delete unnecessary local branches:
# * those named after a JIRA ticket based on the status of this ticket
# * those tracking a contrib-* remote

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
        log 'Usage:'
        log -e '\tgit trim jira'
        log -e 'OR'
        log -e '\tgit trim pr'
        log -e 'OR'
        log -e '\tgit trim merged'
        log -e 'OR'
        log -e '\tgit trim list <branch> [<other branch> ...]'
        abort
}

function is_fixed() {
	local RESOLUTION
	RESOLUTION="$1"
	case $RESOLUTION in
	Fixed)
		true
		;;
	*)
		false
		;;
	esac
}

function delete_local_and_remote_branches() {
	declare -a local_branch_names
	declare -a upstream_branch_names

	while read branch_name
	do
		local_branch_names+=("$branch_name")
		local upstream
		upstream=$(git for-each-ref --format='%(upstream:short)' "refs/heads/$branch_name")
		if [[ "$upstream" =~ ^"$TRIM_REMOTE/" ]]
		then
			upstream_branch_names+=("$(echo "$upstream" | cut -d'/' -f 2)")
		fi
	done

	if (( ${#local_branch_names[*]} == 0 ))
	then
		log "Nothing to delete."
		return
	fi

	log "Will delete upstream branches '${upstream_branch_names[*]}'."
	git push --delete "$TRIM_REMOTE" "${upstream_branch_names[@]}" \
		|| log "Deleting upstream branches on '$TRIM_REMOTE' failed, probably because a branch no longer exists. Ignoring."
	log "Done."

	log "Will delete local branches ${local_branch_names[*]}."
	git branch -D "${local_branch_names[@]}"
	log "Done."
}

# Automatically clean up an old configuration property
git config --local --unset 'trim.jira.remote' 1>/dev/null 2>&1 && log "Cleaned up old configuration property 'trim.jira.remote'" || true

if [ "$1" = 'jira' ]
then
	shift
	(( $# == 0 )) || usage

	TRIM_REMOTE=$(git fork get remote)

	git for-each-ref --format='%(refname:short)' refs/heads/ | git jira info-from-branch-name \
		| jq -r '[.branch, .key, .resolution] | @tsv' \
		| while IFS=$'\t' read BRANCH_NAME TICKET_KEY RESOLUTION
		do
			TICKET_URL=$(git jira url "$TICKET_KEY")
			log -n "Branch '$BRANCH_NAME' refers to ticket '$TICKET_URL' with resolution '$RESOLUTION'. "
			if is_fixed "$RESOLUTION"
			then
				log "Deleting."
				echo "$BRANCH_NAME"
			else
				log "Skipping."
			fi
		done | delete_local_and_remote_branches
elif [ "$1" = 'pr' ]
then
	shift
	(( $# == 0 )) || usage

	for LINE in $(git for-each-ref --format="%(refname:short):%(upstream:short)" refs/heads/ | grep -E ':contrib-[^/]+/.+$')
	do
		LOCAL_BRANCH=$(echo "$LINE" | cut -d':' -f 1)
		UPSTREAM_BRANCH=$(echo "$LINE" | cut -d':' -f 2)
		log "Branch '$LOCAL_BRANCH' is tracking the remote branch '$UPSTREAM_BRANCH', which is on a contributor's remote. Deleting."
		git branch -D "$LOCAL_BRANCH"
	done
elif [ "$1" = 'merged' ]
then
	shift
	(( $# == 0 )) || usage

	TRIM_REMOTE=$(git fork get remote)
	UPSTREAM_REMOTE=$(git fork get upstream.remote)
	UPSTREAM_HEAD=$(git fork get upstream.branch.head)

	for LINE in $(git branch --merged "$UPSTREAM_HEAD" --format='%(refname:short):%(upstream:short)' | grep -P -v ":\Q$UPSTREAM_REMOTE\E/")
	do
		LOCAL_BRANCH=$(echo "$LINE" | cut -d':' -f 1)
		log "Branch '$LOCAL_BRANCH' has been merged into '$UPSTREAM_HEAD'. Deleting."
		echo "$LOCAL_BRANCH"
	done | delete_local_and_remote_branches
elif [ "$1" = 'list' ]
then
	shift
	(( $# >= 1 )) || usage

	TRIM_REMOTE=$(git fork get remote)

	for BRANCH_NAME in "${@}"
	do
		log "Will delete branch '$BRANCH_NAME'."
		echo "$BRANCH_NAME"
	done | delete_local_and_remote_branches
else
	usage
fi

