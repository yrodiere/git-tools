#!/bin/bash
# Delete unnecessary local branches:
# * those named after a JIRA ticket based on the status of this ticket
# * those tracking a contrib-* remote

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
        log 'Usage:'
        log -e '\tgit trim jira'
        log -e 'OR'
        log -e '\tgit trim pr'
        log -e 'OR'
        log -e '\tgit trim merged'
        log -e 'OR'
        log -e '\tgit trim list <branch> [<other branch> ...]'
        abort
}

function is_fixed() {
	local RESOLUTION="$1"
	case $RESOLUTION in
	Fixed)
		true
		;;
	*)
		false
		;;
	esac
}

function delete_local_and_remote_branch() {
	local BRANCH_NAME="$1"
	local UPSTREAM=$(git for-each-ref --format='%(upstream:short)' "refs/heads/$BRANCH_NAME")
	if [[ "$UPSTREAM" =~ ^"$TRIM_REMOTE/" ]]
	then
		local UPSTREAM_BRANCH=$(echo "$UPSTREAM" | cut -d'/' -f 2)
		git push --delete "$TRIM_REMOTE" "$UPSTREAM_BRANCH" \
			|| log "Deleting '$UPSTREAM_BRANCH' on '$TRIM_REMOTE' failed, probably because the branch no longer exists. Ignoring."
	fi
	git branch -D "$BRANCH_NAME"
}

function trim_jira_if_necessary() {
	while read BRANCH_NAME TICKET_KEY TARGET_BRANCH
	do
		TICKET_URL=$(git jira url "$TICKET_KEY")
		RESOLUTION=$(git jira resolution "$TICKET_KEY" 2>/dev/null || true)
		log -n "Branch '$BRANCH_NAME' refers to ticket '$TICKET_URL' with resolution '$RESOLUTION'. "
		if is_fixed "$RESOLUTION"
		then
			log "Deleting."
			delete_local_and_remote_branch "$BRANCH_NAME"
		else
			log "Skipping."
		fi
	done
}

# Automatically clean up an old configuration property
git config --local --unset 'trim.jira.remote' 1>/dev/null 2>&1 && log "Cleaned up old configuration property 'trim.jira.remote'" || true

if [ "$1" = 'jira' ]
then
	shift
	(( $# == 0 )) || usage

	TRIM_REMOTE=$(git fork get remote)

	git for-each-ref --format='%(refname:short)' refs/heads/ | git jira translate-branch-name | trim_jira_if_necessary
elif [ "$1" = 'pr' ]
then
	shift
	(( $# == 0 )) || usage

	for LINE in $(git for-each-ref --format="%(refname:short):%(upstream:short)" refs/heads/ | grep -E ':contrib-[^/]+/.+$')
	do
		LOCAL_BRANCH=$(echo "$LINE" | cut -d':' -f 1)
		UPSTREAM_BRANCH=$(echo "$LINE" | cut -d':' -f 2)
		log "Branch '$LOCAL_BRANCH' is tracking the remote branch '$UPSTREAM_BRANCH', which is on a contributor's remote. Deleting."
		git branch -D "$LOCAL_BRANCH"
	done
elif [ "$1" = 'merged' ]
then
	shift
	(( $# == 0 )) || usage

	TRIM_REMOTE=$(git fork get remote)
	UPSTREAM_REMOTE=$(git fork get upstream.remote)
	UPSTREAM_HEAD=$(git fork get upstream.branch.head)

	for LINE in $(git branch --merged "$UPSTREAM_HEAD" --format='%(refname:short):%(upstream:short)' | grep -P -v ":\Q$UPSTREAM_REMOTE\E/")
	do
		LOCAL_BRANCH=$(echo "$LINE" | cut -d':' -f 1)
		log "Branch '$LOCAL_BRANCH' has been merged into '$UPSTREAM_HEAD'. Deleting."
		delete_local_and_remote_branch "$LOCAL_BRANCH"
	done
elif [ "$1" = 'list' ]
then
	shift
	(( $# >= 1 )) || usage

	TRIM_REMOTE=$(git fork get remote)

	for BRANCH_NAME in "${@}"
	do
		log "Deleting branch '$BRANCH_NAME'."
		delete_local_and_remote_branch "$BRANCH_NAME"
	done
else
	usage
fi

