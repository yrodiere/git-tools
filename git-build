#!/bin/bash
# it will clone your existing repo and run the maven tests off this clone
# the branch tests are run from is the current branch at the time of cloning
#
# Note that you can work on the next bug while this is going on
#
# git build
# runs mvn clean install
#
# git build mvn test -pl module1,module2
# runs mvn test -pl module1,module2
#
# For Mac OS users, if growlnotifier is present, a sticky notification will be sent upon build completion.
#
# Many thanks to David Gageot (http://blog.javabien.net) for the inspiration and optimization of this script.
#
# Copyright (c) 2010 David Gageot
# Copyright (c) 2010-2011 Emmanuel Bernard
# Copyright (c) 2012-2013 Sanne Grinovero
# Copyright (c) 2017 Yoann Rodiere

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
        log "Usage:"
        log -e "\tgit-build"
        log -e "OR"
        log -e "\tgit-build <executable> [<argument>...]"
        log -e "OR"
        log -e "\tgit-build <bash command string>"
}

function notify() {
	if [ `uname -s` == "Darwin" ]; then
		# On Mac OS, notify via Growl
		which -s growlnotify 1>/dev/null && growlnotify --name Maven --sticky --message "$2: $1"
	fi
	if [ `uname -s` == "Linux" ]; then
		# On Linux, notify via notify-send
		which notify-send 1>/dev/null && notify-send "$1" "$2"
	fi
}


function display_build_info() {
	log ""
	log "***** Build info ***********************"
	log "Source directory:   $SOURCE_DIRECTORY"
	log "Source ref:         $READABLE_REF"
	log "Build directory:    $DIRECTORY"
	log "Build command:      ${BUILD_COMMAND[@]}"
	log "****************************************"
	log ""
}


SOURCE_DIRECTORY="$(pwd)"

#the cloned repo will live in DIRECTORY_ROOT/REPO_DIRECTORY/CURRENT_COMMITID
#cleanup is not performed: personally I mount a ram directory on /tmp
DIRECTORY_ROOT=$(git config 'build.root') \
	|| DIRECTORY_ROOT="/tmp/privatebuild/"

#get the last part of the directory name
DIRECTORY_SUFFIX="$(basename -s "" "$SOURCE_DIRECTORY")"

COMMIT=`git rev-parse HEAD`
if SYMBOLIC_REF=`git symbolic-ref -q --short HEAD`
then
	READABLE_REF="$SYMBOLIC_REF"
else
	READABLE_REF="$COMMIT"
fi
DIRECTORY="${DIRECTORY_ROOT}${DIRECTORY_SUFFIX}/${COMMIT}"

while getopts 'h' opt
do
        case "$opt" in
		"h")
			usage
			success			
			;;
                \?)
			usage
			abort
			;;
        esac
done

shift $(( OPTIND - 1 ))
BUILD_COMMAND=("$@")
shift $#

#fresh clone
rm -Rf $DIRECTORY
mkdir -p $DIRECTORY
if [ -n "$SYMBOLIC_REF" ]
then
	git clone -sl -b "$SYMBOLIC_REF" . $DIRECTORY
	cd $DIRECTORY
else
	git clone -sl . $DIRECTORY
	cd $DIRECTORY
	git checkout $COMMIT
fi

# Allow for parameters to override the build command for this project:
if [[ ${#BUILD_COMMAND[@]} -eq 0 ]]; then 
	if [ -e "pom.xml" ]; then
		# For Maven projects we can assume a default:
		BUILD_COMMAND=("mvn clean install")
	else
		abort "Build command must be provided as parameters for non-maven projects. No pom.xml detected."
	fi
fi

display_build_info

# Make sure the following commands won't abort the script if they fail,
# which is the default behavior with the lib/common.sh import at the top of this script.
set +o errexit

eval "${BUILD_COMMAND[@]}"

RESULT=$?

display_build_info

NOTIFICATION_TITLE="git-build '$READABLE_REF' from '$SOURCE_DIRECTORY'"
if (( $RESULT == 0 ))
then
	NOTIFICATION_BODY="SUCCESS"
	notify "$NOTIFICATION_TITLE" "$NOTIFICATION_BODY"
	success "$NOTIFICATION_TITLE: $NOTIFICATION_BODY"
else
	NOTIFICATION_BODY="FAILURE"
	notify "$NOTIFICATION_TITLE" "$NOTIFICATION_BODY"
	abort "$NOTIFICATION_TITLE: $NOTIFICATION_BODY"
fi
