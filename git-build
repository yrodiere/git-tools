#!/bin/bash
# it will clone your existing repo and run the maven tests off this clone
# the branch tests are run from is the current branch at the time of cloning
#
# Note that you can work on the next bug while this is going on
#
# git build
# runs maven clean install
#
# git build test -pl module1,module2
# runs maven test -pl module1,module2
#
# For Mac OS users, if growlnotifier is present, a sticky notification will be sent upon build completion.
# 
# The environment variable BUILD_COMMAND should contain the command you want to invoke to run the build;
# I use this so I can forget how each process is built: I use scripts which jump to the right directory,
# set the right JVM and other necessary tools, including the value of this BUILD_COMMAND.
# In case of Maven projects a default is set; otherwise the value is mandatory.
#
# Many thanks to David Gageot (http://blog.javabien.net) for the inspiration and optimization of this script.
#
# Released under the WTFPL license version 2 http://sam.zoy.org/wtfpl/
#
# Copyright (c) 2010 David Gageot
# Copyright (c) 2010-2011 Emmanuel Bernard
# Copyright (c) 2012-2013 Sanne Grinovero

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/common.sh

#the cloned repo will live in DIRECTORY_ROOT/REPO_DIRECTORY/CURRENT_COMMITID
#cleanup is not performed: personally I mount a ram directory on /tmp
DIRECTORY_ROOT=$(git config 'build.root')
if [ -z "$DIRECTORY_ROOT" ]
then
	DIRECTORY_ROOT="/tmp/privatebuild/"
fi

#get the last part of the directory name
IFS="/"
SPLIT_DIR=(`pwd`)
SIZE=${#SPLIT_DIR[@]}
let LAST_INDEX=$SIZE-1
DIRECTORY_SUFFIX=${SPLIT_DIR[$LAST_INDEX]}
IFS=""

COMMIT=`git rev-parse HEAD`
if SYMBOLIC_REF=`git symbolic-ref -q --short HEAD`
then
	READABLE_REF="$SYMBOLIC_REF"
else
	READABLE_REF="$COMMIT"
fi
DIRECTORY="${DIRECTORY_ROOT}${DIRECTORY_SUFFIX}/${COMMIT}"

#fresh clone
rm -Rf $DIRECTORY
mkdir -p $DIRECTORY
if [ -n "$SYMBOLIC_REF" ]
then
	git clone -sl -b "$SYMBOLIC_REF" . $DIRECTORY
	cd $DIRECTORY
else
	git clone -sl . $DIRECTORY
	cd $DIRECTORY
	git checkout $COMMIT
fi

log ""
log "***** Working on ref $READABLE_REF *****"
log ""
log ""

say() {
	if [ `uname -s` == "Darwin" ]; then
		# On Mac OS, notify via Growl
		which -s growlnotify && growlnotify --name Maven --sticky --message "Maven - git ref $READABLE_REF - $RESULT"
	fi
	if [ `uname -s` == "Linux" ]; then
		# On Linux, notify via notify-send
		which notify-send && notify-send "Maven - Ref $READABLE_REF" "$RESULT"
	fi
}

# Allow for environment variable to override the build command for this project:
# (I have aliased scripts setting up a specific environment for each project I work on)
if [ -e "pom.xml" ]; then
	# For Maven projects we can assume a default:
	BUILD_CMD=${BUILD_COMMAND-"mvn clean install"}
	if [[ $# -eq 0 ]]; then 
		eval $BUILD_CMD
	else
		mvn "$@" 
	fi
else
	if [ -z "$BUILD_COMMAND" ]
	then
		abort "Variable BUILD_COMMAND needs to be set for non-maven projects. No pom.xml detected."
	fi
	eval BUILD_COMMAND
fi

if [ $? -eq 0 ]; then
	RESULT="Build SUCCESS"
	say
	success $RESULT
else
	RESULT="Build FAILURE"
	say
	abort $RESULT
fi
