#!/bin/bash
# Checkout and create PRs on GitHub

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/common.sh

function usage() {
	log 'Usage:'
       	log -e '\tgit pr <user>:<branch>'
       	log -e 'OR'
       	log -e '\tgit pr create'
       	log -e 'OR'
       	log -e '\tgit pr create <branch>'
       	log -e 'OR'
       	log -e '\tgit pr create <branch> <jira ticket>'
       	log -e 'OR'
       	log -e '\tgit pr create <branch> <jira ticket> <upstream branch>'
	abort
}

function checkout_existing() {
	git checkout "$LOCAL_BRANCH_NAME" \
		&& success "Checked out the pre-existing local branch '$LOCAL_BRANCH_NAME'." \
		|| abort "Error while checking out the pre-existing local branch '$LOCAL_BRANCH_NAME'."
}

function fetch_remote() {
	local REMOTE_NAME="$1"
	local REMOTE_URL="$2"
	git remote get-url "$REMOTE_NAME" 2>/dev/null | grep "^$REMOTE_URL\$" \
		|| git remote add "$REMOTE_NAME" "$REMOTE_URL"
	git fetch -p "$REMOTE_NAME"
}

function checkout_missing() {
	local REMOTE_URL="https://github.com/$REMOTE_USER_NAME/$REPOSITORY_NAME.git"
	local REMOTE_NAME="contrib-$REMOTE_USER_NAME"
	fetch_remote "$REMOTE_NAME" "$REMOTE_URL"
	git checkout -b "$LOCAL_BRANCH_NAME" "$REMOTE_NAME"/"$REMOTE_BRANCH_NAME"
}

function create_pr() {
	local FORK_BRANCH="$1"
	local JIRA_TICKET_KEY="${2:-$(echo $FORK_BRANCH | git jira translate-branch-name | cut -f 2)}"
	local UPSTREAM_HEAD_BRANCH="${3:-$(echo $FORK_BRANCH | git jira translate-branch-name | cut -f 3)}"
	if [ -z "$UPSTREAM_HEAD_BRANCH" ]
	then
		UPSTREAM_HEAD_BRANCH=$(git fork upstream.branch.head.relative)
	fi

	local UPSTREAM_URL="$(git fork upstream.url.http)"
	local FORK_USERNAME="$(git fork user.name)"

	local TITLE=$(echo "$JIRA_TICKET_KEY $(git jira summary $JIRA_TICKET_KEY)" | urlencode)
	local BODY=$(git jira url $JIRA_TICKET_KEY | urlencode)

	xdg-open "$UPSTREAM_URL/compare/$UPSTREAM_HEAD_BRANCH...$FORK_USERNAME:$FORK_BRANCH?expand=1&title=$TITLE&body=$BODY"
}

if [ "$1" = 'setup' ]
then
	shift
	git config --local 'pr.repository.name' "$1"
	success "Successfully set target repository for pull requests to '$1'."
fi

REPOSITORY_NAME=$(git config --local 'pr.repository.name' || abort "Use 'git pr setup <repository-name>' to set the repository name first.")

if [ "$1" == 'create' ]
then
	shift
	if (( $# == 0 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	elif (( $# == 1 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
	elif (( $# == 2 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
		JIRA_TICKET_KEY=$2
	elif (( $# == 3 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
		JIRA_TICKET_KEY=$2
		UPSTREAM_HEAD_BRANCH=$3
	else
		usage
	fi
	create_pr "$FORK_BRANCH" "$JIRA_TICKET_KEY" "$UPSTREAM_HEAD_BRANCH"
else 
	(( $# == 1 )) || usage

	REMOTE_USER_NAME=$(echo "$1" | awk -F ':' '{ print $1 }')
	REMOTE_BRANCH_NAME=$(echo "$1" | awk -F ':' '{ print $2 }')

	[ -n "$REMOTE_USER_NAME" -a -n "$REMOTE_BRANCH_NAME" ] || usage

	LOCAL_BRANCH_NAME="$REMOTE_USER_NAME-$REMOTE_BRANCH_NAME"

	git rev-parse --quiet --verify "$LOCAL_BRANCH_NAME" && checkout_existing || checkout_missing
fi
