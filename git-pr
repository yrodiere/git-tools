#!/bin/bash
# Checkout and create PRs on GitHub

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
	log 'Usage:'
       	log -e '\tgit pr setuser <user> <remote url>'
       	log -e 'OR'
       	log -e '\tgit pr <user>:<branch>'
       	log -e 'OR'
       	log -e '\tgit pr create'
       	log -e 'OR'
       	log -e '\tgit pr create <branch>'
       	log -e 'OR'
       	log -e '\tgit pr create <branch> <jira ticket>'
       	log -e 'OR'
       	log -e '\tgit pr create <branch> <jira ticket> <upstream branch>'
	abort
}

function create_remote() {
	git remote add --no-tags "$1" "$2"
}

function create_pr() {
	local FORK_BRANCH
	FORK_BRANCH="$1"

	local JIRA_INFO
	JIRA_INFO=( $(echo $FORK_BRANCH | git jira translate-branch-name 2>/dev/null || true) )

	local UPSTREAM_HEAD_BRANCH
	UPSTREAM_HEAD_BRANCH="$3"
	local UPSTREAM_DEFAULT_HEAD_BRANCH
	UPSTREAM_DEFAULT_HEAD_BRANCH="$(git fork get upstream.branch.head.relative)"
	if [ -z "$UPSTREAM_HEAD_BRANCH" ]
	then
		UPSTREAM_HEAD_BRANCH="${JIRA_INFO[2]}"
		if [ -z "$UPSTREAM_HEAD_BRANCH" ]
		then
			UPSTREAM_HEAD_BRANCH="$(git fork closest-upstream-branch-name $FORK_BRANCH 2>/dev/null || true)"
		fi
		if [ -z "$UPSTREAM_HEAD_BRANCH" ]
		then
			UPSTREAM_HEAD_BRANCH="$UPSTREAM_DEFAULT_HEAD_BRANCH"
			log "WARNING: The upstream branch for the current branch could not be detected (either because the branch name does not include this information \
or because git-jira is not set up). Defaulting to '$UPSTREAM_HEAD_BRANCH'."
		fi
	fi

	local JIRA_TICKET_KEYS=( $2 )
	if (( ${#JIRA_TICKET_KEYS[@]} == 0 ))
	then
		JIRA_TICKET_KEYS_STRING="$(git log "$UPSTREAM_HEAD_BRANCH..$FORK_BRANCH" --format="%s" | git jira extract-ticket-keys 2>/dev/null || true)"
		JIRA_TICKET_KEYS=( $JIRA_TICKET_KEYS_STRING )
		if (( ${#JIRA_TICKET_KEYS[@]} < 0 || 20 < ${#JIRA_TICKET_KEYS[@]} ))
		then
			log "WARNING: Failed to detect JIRA tickets from commit messages. Defaulting to detecting the JIRA ticket from the branch name."
			BRANCH_JIRA_TICKET_KEY="${JIRA_INFO[1]}"
			if [ -n "$BRANCH_JIRA_TICKET_KEY" ]
			then
				JIRA_TICKET_KEYS=( "$BRANCH_JIRA_TICKET_KEY" )
			else
				log "WARNING: The JIRA ticket could not be detected (either because branch name and commit messages do not include this information \
or because git-jira is not set up). The PR title and text won't be populated automatically."
			fi
		fi
	fi
	log "Ticket keys for this branch: ${JIRA_TICKET_KEYS[*]}."

	local UPSTREAM_URL
	UPSTREAM_URL="$(git fork get upstream.url.http)"
	local FORK_USERNAME
	FORK_USERNAME="$(git fork get user.name)"

	PR_CREATE_URL="$UPSTREAM_URL/compare/$UPSTREAM_HEAD_BRANCH...$FORK_USERNAME:$FORK_BRANCH?expand=1"
	if (( ${#JIRA_TICKET_KEYS[@]} > 0 ))
	then
		PR_CREATE_URL+="&"
		PR_CREATE_URL+=$(git jira info "${JIRA_TICKET_KEYS[@]}" | jq -r '[.key, .summary] | @tsv' \
			| build_title_and_body "${JIRA_TICKET_KEYS[@]}")
	fi

	xdg-open "$PR_CREATE_URL"
}

function build_title_and_body() {
	local MAIN_JIRA_TICKET_SUMMARY
	local TICKET_LIST
	while IFS=$'\t' read key summary
	do
		if [ "$key" = "$1" ]
		then
			MAIN_JIRA_TICKET_SUMMARY="$summary"
		fi
		TICKET_LIST+="* [$key]($(git jira url $key)): $summary"
		TICKET_LIST+=$'\n'
	done

	local TITLE
	local JIRA_TICKET_KEYS_FOR_TITLE="$(echo "${@}" | sed -E 's/(\n|\s)+/ + /g')"
	if [ "$UPSTREAM_HEAD_BRANCH" = "$UPSTREAM_DEFAULT_HEAD_BRANCH" ]
	then
		TITLE=$(echo "${JIRA_TICKET_KEYS_FOR_TITLE[*]} $MAIN_JIRA_TICKET_SUMMARY" | urlencode)
	else
		TITLE=$(echo "Backport ${JIRA_TICKET_KEYS_FOR_TITLE[*]} to branch $UPSTREAM_HEAD_BRANCH - $MAIN_JIRA_TICKET_SUMMARY" | urlencode)
	fi

	local BODY
	if (( $# == 1 ))
	then
		BODY=$(git jira url "$1" | urlencode)
	else
		BODY=$(echo "$TICKET_LIST" | urlencode)
	fi
	
	echo "title=$TITLE&body=$BODY"
}

function get_pr() {
	local REMOTE_USER_NAME
	REMOTE_USER_NAME="$1"
	local REMOTE_BRANCH_NAME
	REMOTE_BRANCH_NAME="$2"

	local REMOTE_NAME
	REMOTE_NAME="contrib-$REMOTE_USER_NAME"
	local LOCAL_BRANCH_NAME
	LOCAL_BRANCH_NAME="$REMOTE_USER_NAME-$REMOTE_BRANCH_NAME"

	local REPOSITORY_NAME
	REPOSITORY_NAME="$(git fork get upstream.repository.name)"
	local DEFAULT_REMOTE_URL
	# Use SSH because that's the protocol that is most likely to have authentication configured
	# and authentication is necessary for private repositories
	DEFAULT_REMOTE_URL="git@github.com:$REMOTE_USER_NAME/$REPOSITORY_NAME.git"

	# Create the remote if missing
	git remote get-url "$REMOTE_NAME" 1>&2 2>/dev/null \
		|| create_remote "$REMOTE_NAME" "$DEFAULT_REMOTE_URL"

	git fetch -p "$REMOTE_NAME"

	if git rev-parse --quiet --verify "$LOCAL_BRANCH_NAME" 1>&2 2>/dev/null
	then
		git checkout "$LOCAL_BRANCH_NAME" \
			&& git pull \
			&& success "Checked out the pre-existing local branch '$LOCAL_BRANCH_NAME'." \
			|| abort "Error while checking out the pre-existing local branch '$LOCAL_BRANCH_NAME'."
	else
		git checkout -b "$LOCAL_BRANCH_NAME" "$REMOTE_NAME"/"$REMOTE_BRANCH_NAME" \
			&& success "Checked out a new local branch '$LOCAL_BRANCH_NAME'." \
			|| abort "Error while checking out a new local branch '$LOCAL_BRANCH_NAME'."
	fi
}

# Automatically clean up an old configuration property
git config --local --unset 'pr.repository.name' 1>/dev/null 2>&1 && log "Cleaned up old configuration property 'pr.repository.name'" || true

if [ "$1" == 'create' ]
then
	shift
	if (( $# == 0 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	elif (( $# == 1 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
	elif (( $# == 2 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
		JIRA_TICKET_KEY=$2
	elif (( $# == 3 ))
	then
		FORK_BRANCH=$(git rev-parse --abbrev-ref "$1")
		JIRA_TICKET_KEY=$2
		UPSTREAM_HEAD_BRANCH=$3
	else
		usage
	fi

	create_pr "$FORK_BRANCH" "$JIRA_TICKET_KEY" "$UPSTREAM_HEAD_BRANCH"
elif [ "$1" == 'setuser' ]
then
	shift
	(( $# == 2 )) || usage

	REMOTE_USER_NAME="$1"
	REMOTE_URL="$2"

	[ -n "$REMOTE_USER_NAME" -a -n "$REMOTE_URL" ] || usage

	REMOTE_NAME="contrib-$REMOTE_USER_NAME"

	git remote remove "$REMOTE_NAME" 1>&2 2>/dev/null || true
	create_remote "$REMOTE_NAME" "$REMOTE_URL"

	success "Successfully set remote '$REMOTE_NAME' to '$REMOTE_URL'"
else
	(( $# == 1 )) || usage

	REMOTE_USER_NAME=$(echo "$1" | awk -F ':' '{ print $1 }')
	REMOTE_BRANCH_NAME=$(echo "$1" | awk -F ':' '{ print $2 }')

	[ -n "$REMOTE_USER_NAME" -a -n "$REMOTE_BRANCH_NAME" ] || usage

	get_pr "$REMOTE_USER_NAME" "$REMOTE_BRANCH_NAME"

fi
