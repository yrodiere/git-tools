#!/bin/bash
# Various utilities to get information from JIRA

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
	log "Usage:"
	log -e "\tgit jira setup <JIRA endpoint> <JIRA project key>"
	log -e "OR"
	log -e "\tgit jira url <JIRA ticket key>"
	log -e "OR"
	log -e "\tgit jira resolution <JIRA ticket key>"
	log -e "OR"
	log -e "\tgit jira summary <JIRA ticket key>"
	log -e "OR"
	log -e "\tgit jira translate-branch-name"
	abort
}

function setup_first() {
	abort "Use 'git jira setup <JIRA endpoint> <JIRA project key>' to set the JIRA parameters first."
}

function query_ticket() {
	local TICKET_KEY="$1"
	local URL="$ENDPOINT/rest/api/2/issue/$TICKET_KEY"
	curl -s -X GET -L -f -H "Content-Type: application/json" "$URL" \
		|| abort "Failed to retrieve ticket '$TICKET_KEY' from '$URL'"
}

function extract_field() {
	which jq 1>/dev/null || abort "You must install the JSON parsing utility 'jq' first."
	jq -er "$1" || abort "Failed to extract field '$1' from the JIRA ticket."
}

if [ "$1" = 'setup' ]
then
	shift
	git config --local 'jira.endpoint' "$1"
	git config --local 'jira.project.key' "$2"
	success "Successfully set the JIRA endpoint ('$1') and project key ('$2')."
fi

ENDPOINT=$(git config --local 'jira.endpoint' || setup_first)
PROJECT_KEY=$(git config --local 'jira.project.key' || setup_first)

if [ "$1" = 'url' ]
then
	shift
	(( $# == 1 )) || usage
	TICKET_KEY="$1"
	echo "$ENDPOINT/browse/$TICKET_KEY"
elif [ "$1" = 'resolution' ]
then
	shift
	(( $# == 1 )) || usage
	TICKET_KEY="$1"
	query_ticket "$TICKET_KEY" | extract_field '.fields.resolution.name'
elif [ "$1" = 'summary' ]
then
	shift
	(( $# == 1 )) || usage
	TICKET_KEY="$1"
	query_ticket "$TICKET_KEY" | extract_field '.fields.summary'
elif [ "$1" = 'translate-branch-name' ]
then
	shift
	(( $# == 0 )) || usage
	# Output: <input><tab><ticket name><tab><base branch (if any)>
	sed -r 's/^('"$PROJECT_KEY"'-[[:digit:]]+)(-(([.[:digit:]]+)|.*))?$/\0\t\1\t\4/;t;d;'
else
	usage
fi

