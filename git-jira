#!/bin/bash
# Various utilities to get information from JIRA

source $(readlink -f ${BASH_SOURCE[0]} | xargs dirname)/lib/common.sh

function usage() {
	log "Usage:"
	log -e "\tgit jira setup <JIRA endpoint> <JIRA project key>"
	log -e "OR"
	log -e "\tgit jira info <JIRA ticket key> [<JIRA ticket key> ...]"
	log -e "OR"
	log -e "\tgit jira url <JIRA ticket key>"
	log -e "OR"
	log -e "\tgit jira translate-branch-name"
	log -e "OR"
	log -e "\tgit jira info-from-branch-name"
	log -e "OR"
	log -e "\tgit jira extract-ticket-keys"
	abort
}

function setup_first() {
	abort "Use 'git jira setup <JIRA endpoint> <JIRA project key>' to set the JIRA settings first."
}

function query_tickets() {
	declare -a ticket_keys
	readarray ticket_keys
	curl -s -f -X POST -L -H "Content-Type: application/json" \
		--data "{\"jql\": \"key IN ($(join_by ',' ${ticket_keys[*]}))\", \"fields\": [\"key\",\"resolution\",\"summary\"], \"maxResults\": ${#ticket_keys[@]}}" \
		"$ENDPOINT/rest/api/2/search" \
		| jq '.issues[] | {key: .key, summary: .fields.summary, resolution: .fields.resolution.name}' \
		|| abort "Failed to retrieve some tickets in '${ticket_keys[*]}'; are they all valid ticket keys?"
}

function extract_field() {
	jq -r "${@}" || abort "Failed to extract fields '${@}' from the JIRA ticket."
}

if [ "$1" = 'setup' ]
then
	shift
	(( $# == 2 )) && [ -n "$1" -a -n "$2" ] || usage
	git config --local 'jira.endpoint' "$1"
	git config --local 'jira.project.key' "$2"
	success "Successfully set the JIRA endpoint ('$1') and project key ('$2')."
fi

# Remove trailing slashes to avoid problems in chrome (JIRA probably has some buggy javascript)
ENDPOINT=$(git config --local 'jira.endpoint' | sed -E 's,/+$,,' || setup_first)
PROJECT_KEY=$(git config --local 'jira.project.key' || setup_first)

if [ "$1" = 'url' ]
then
	shift
	(( $# == 1 )) || usage
	TICKET_KEY="$1"
	echo "$ENDPOINT/browse/$TICKET_KEY"
elif [ "$1" = 'info' ]
then
	shift
	if (( $# > 0 ))
	then
		join_by $'\n' "${@}" | query_tickets
	else
		query_tickets
	fi
elif [ "$1" = 'translate-branch-name' ]
then
	shift
	(( $# == 0 )) || usage
	# Output: <input><tab><ticket key><tab><base branch (if any)>
	sed -r 's/^('"$PROJECT_KEY"'-[[:digit:]]+)(-(([.[:digit:]]+)|.*))?$/\0\t\1\t\4/;t;d;'
elif [ "$1" = 'info-from-branch-name' ]
then
	shift
	(( $# == 0 )) || usage
	TSV=$(mktemp)
	sed -r 's/^('"$PROJECT_KEY"'-[[:digit:]]+)(-(([.[:digit:]]+)|.*))?$/\0\t\1\t\4/;t;d;' | sort -t $'\t' -k 2 >$TSV
	cut -f 2 -d $'\t' $TSV | query_tickets | jq -r '[.key, .summary, .resolution] | @tsv' | sort -t $'\t' -k 1 \
			| join -t $'\t' -1 2 -2 1 "$TSV" - \
			| jq --raw-input 'split("\t") | {key: .[0], branch: .[1], base_branch: .[2], summary: .[3], resolution: .[4]}'
	rm -f "$TSV"
elif [ "$1" = 'extract-ticket-keys' ]
then
	shift
	(( $# == 0 )) || usage
	sed -E 's/^\[?('"$PROJECT_KEY"'-[[:digit:]]+)\]? .*/\1/;t;d;' | sort -u
else
	usage
fi

